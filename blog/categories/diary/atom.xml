<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | ガブリ途中下車の旅〜マサイ族の砦〜]]></title>
  <link href="http://takkanm.github.com/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://takkanm.github.com/"/>
  <updated>2012-09-18T01:31:01+09:00</updated>
  <id>http://takkanm.github.com/</id>
  <author>
    <name><![CDATA[takkanm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[リーダブルコードを読んだ]]></title>
    <link href="http://takkanm.github.com/blog/2012/07/02/readreadablecode/"/>
    <updated>2012-07-02T23:35:00+09:00</updated>
    <id>http://takkanm.github.com/blog/2012/07/02/readreadablecode</id>
    <content type="html"><![CDATA[<p>訳者の角さんが<a href="http://www.livlis.com/items/show/id/38186/">livlisで感想を書く人を募集</a>していたので、応募したところ本書を頂くことができました。ありがとうございます。</p>

<p>この本は、「CleanCode」や「リファクタリング」に書かれているエッセンスが「CodeCraft」のようなイラストを交じえて、読みやすい文章で書かれています。それが安心の角さん訳になっているので、大変読みやすいです。</p>

<p>本書は「読みやすい(リーダブルな)コード」を書くためにはどうするとよいかという内容になっています。良いとされるコードを「読みやすい」と置いているのがミソと感じました。この本では、良いコードに必要とされているオブジェクト指向の原則とされていることが難しい言葉でずらずらと書かれているのではなく、「読みやすいコードは、こうである」というのが平易な文章で書かれています。</p>

<p>この本のよいところは、手をつけやすいところから話をしているところだと思いました。まずは、変数名等の名前のつけ方から、コード整形、コメントなどのコードの見ためから入っていきます。「良い名前が良いのはわかるけど、どうやって付けるんだよ?」とか思うかもしれないけど、よい名前の基準や選び方などがちゃんと解説されている。何が良いかだけでなく、何故良いかもちゃんと書かれているので、漠然と「良いコードとは何か?」と悩んでいる人は、この基準をベースに考えていけるようになると思います。</p>

<p>またこの見た目の修正は、コードを読むときに適用していけば、コードの理解も深まるしリファクタリングにもなるしで一石二鳥だなぁと感じました。本書を読んでいる最中に実際のプロジェクトに適用していったところ、コードのパターンが明確になり、より大きなリファクタリングをやるための下準備になると思うことができました。</p>

<p>また、日本語版の特典として<a href="http://www.clear-code.com/">株式会社クリアコード</a>の社長である須藤氏の解説が書かれています。解説は<a href="http://www.clear-code.com/blog/2012/6/11.html">クリアコードのブログであるククログ</a>にて、公開されています。解説では、須藤氏によるリーダブルなコードを身につけるために実践すべきことが書かれています。リーダブルなコードを書くためにはチームでも実践する必要があるんだということが書かれているのが特徴です。本編では個人で実践することが書かれており、解説ではリーダブルなコードはチームで育てる必要があるというのを認識させてくれ、とてもバランス良く感じます。</p>

<p><a href="https://twitter.com/kdmsnr/status/216399445166784512">まだ解説を全部暗記できていないのですが</a>、最近は他の人のコードを見たりすることが多くなったので、解説中に書かれている提案コミットは実践するようになりました。解説にあるとおりコミットの diff だけでは何故が伝わらないので、どうしてこうするかというのをコミットメッセージや pull request のコメントに書くようにしています。</p>

<p>最後に、この本をボッチで試行錯誤してコードを書いている人にお勧めしたいと思います。ボッチでというのは、他の人にコードを見せていない、見せていないわけではけどフィードバックを貰えていない人のことを指します。そういった人は、コードの基準が持てず自分のコードに自身が持てないのではないかと思います(私は幸いにして、会社の同僚からツッコミを得ることができ、まだまだ実践はできてませんが良いコードとはどういった感じかというヒントは貰えております)。自信が持てないと、自分のコードを公開するということも大変怖いと感じるのではないでしょうか。そんな方は、この本を読んで「良みやすい」コードの基準を知り、もっと自信を持って書いていけるのではないかと思います。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takkanm-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873115655" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takkanm-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4048676881" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takkanm-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4894712288" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=takkanm-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4839921946" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openFrameworksを触りだしました]]></title>
    <link href="http://takkanm.github.com/blog/2012/05/12/beginning-open-frameworks/"/>
    <updated>2012-05-12T12:43:00+09:00</updated>
    <id>http://takkanm.github.com/blog/2012/05/12/beginning-open-frameworks</id>
    <content type="html"><![CDATA[<p><a href="http://yoppa.org/blog/3751.html">openFrameworks Tokyo Workshop #1</a>の記事を読んで、<a href="http://www.openframeworks.cc/">openFrameworks</a>への興味が再燃してきました。</p>

<p>openFrameworksで新規プロジェクトを始める場合、exsamplesにはいっているemptyExsampleをコピーして始めるようです。が、このままだとプロジェクト名もemptyExsampleのままなので、そのディレクトリ内になるファイルの'emptyExsample'という文字列を全て置換してから、プログラミングを始めるということをやっているんだけど、これが正しいやり方なのかしら…</p>

<p>しばらく、いじってみます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.jsでsha1の値が欲しいとき]]></title>
    <link href="http://takkanm.github.com/blog/2012/04/05/node-crypto/"/>
    <updated>2012-04-05T06:45:00+09:00</updated>
    <id>http://takkanm.github.com/blog/2012/04/05/node-crypto</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/docs/latest/api/crypto.html">Crypto</a>モジュールを使用すればいいのですね。</p>

<p>```coffeescript
crypto = require 'crypto'</p>

<h1>sha1でハッシュを作ることを指定</h1>

<p>sha1_hash = crypto.createHash 'sha1'</p>

<h1>使用する原文を追加</h1>

<p>sha1_hash.update 'abcdefg'</p>

<h1>ダイジェストの値を求める。引数でhexやbase64等を指定できる</h1>

<p>sha1_hash.digest 'hex' #=> 2fb5e13419fc89246865e7a324f476ec624e8740
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmモジュールを公開する方法]]></title>
    <link href="http://takkanm.github.com/blog/2012/03/31/regist-npm/"/>
    <updated>2012-03-31T18:06:00+09:00</updated>
    <id>http://takkanm.github.com/blog/2012/03/31/regist-npm</id>
    <content type="html"><![CDATA[<p><a href="http://takkanm.github.com/blog/2012/03/30/node-im-kayac-0-dot-0-0/">先日</a>npmモジュールを作成し、公開したときのメモを残しておきます。</p>

<h2>ユーザ登録</h2>

<p>まず、ユーザー登録します。ユーザ登録するには、npm adduserコマンドを実行します。</p>

<p><code>
$ npm adduser
</code></p>

<p>コマンドを実行すると、対話的にユーザ名とemailアドレスとパスワードを入力します。その情報は~/.npmrcに保存されます。</p>

<h2>package.jsonの作成</h2>

<p>npmモジュールの情報を保存しておくpackage.jsonを作成します。npm initを実行することで、対話的に情報を入力していきます。</p>

<p><code>
$ npm init
</code></p>

<h2>package registryへの登録</h2>

<p>作成したnpmモジュールをpackage registry に登録します。package.jsonのあるディレクトリでnpm publishします。</p>

<p><code>
$ npm publish
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[im.kayac.comにメッセージを送るnpmモジュールを書いた]]></title>
    <link href="http://takkanm.github.com/blog/2012/03/30/node-im-kayac-0-dot-0-0/"/>
    <updated>2012-03-30T08:33:00+09:00</updated>
    <id>http://takkanm.github.com/blog/2012/03/30/node-im-kayac-0-dot-0-0</id>
    <content type="html"><![CDATA[<p>昨年iPhoneに変更して、push通知サービスに<a href="http://boxcar.io/">Boxcar</a>を使っていたのですが、私のiPhoneではうまく動かないことが多いため不満でした。 そこで、(今更感はありますが)<a href="http://im.kayac.com/">im.kayac.com</a>を使うことにしてみました。</p>

<p>最近coffeescriptを触る機会が増えてきたので、node.jsで使えるライブラリをcoffeescriptで書いてnpm化してみました。node.jsでリアルタイムな何かをiPhoneやAndroidに通知したいとき等に、お使いください。</p>

<ul>
<li><a href="http://search.npmjs.org/#/node-im-kayac">npm registry</a></li>
<li><a href="https://github.com/takkanm/node-im-kayac">takkanm/node-im-kayac</a></li>
</ul>


<p>まだ、メッセージを送るだけしかできないので、残りのところもちゃんと作っていこうと思います。</p>

<p>初めてのnpmモジュール作成だったので(その手順とかは後で書く)、このモジュールの配置でいいのかとか大変疑問なので有識者に聞いてみたいところ。</p>
]]></content>
  </entry>
  
</feed>
